# examples/development-vs-production.yml
# Example: Different configurations for development and production builds
# Development builds: Fast, no releases, with debugging
# Production builds: Full features, releases, optimized

name: LaTeX CI - Development vs Production

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Development build for feature branches and PRs
  development-build:
    name: Development Build
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0

      - name: Build for development
        uses: AlaCodon/latexonfly@main
        with:
          entry_tex: "main.tex"
          engine: "pdflatex"
          texlive_scheme: "basic"             # Faster installation
          keep_build_deps: "true"             # Enable debugging
          cache_key_suffix: "-dev"            # Separate cache for dev
          timeout_minutes: "20"               # Shorter timeout for quick feedback

  # Production build for main branch
  production-build:
    name: Production Build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Build for production
        id: latex
        uses: AlaCodon/latexonfly@main
        with:
          entry_tex: "main.tex"
          engine: "pdflatex"
          texlive_scheme: "full"              # Full TeX Live for production
          timeout_minutes: "60"               # Allow time for full build

  # Create release only for production builds
  create-production-release:
    if: github.ref == 'refs/heads/main'
    needs: production-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Download PDF artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: latex-pdfs
          path: ./pdfs

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="v$(date -u +'%Y%m%d-%H%M%S')-${GITHUB_SHA::7}"
          TITLE="$(git log -1 --pretty=%s)"
          
          cd pdfs
          if ls *.pdf 1> /dev/null 2>&1; then
            gh release create "$TAG" \
              --title "$TITLE" \
              --target "$GITHUB_SHA" \
              --generate-notes \
              --latest \
              *.pdf
          fi
